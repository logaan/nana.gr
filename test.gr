module Test

from "./examples.gr" include Examples
from "./read.gr" include Read
from "./data.gr" include Data
use Data.{ type Data }
use Read.{ tokenise }

let expectedCompare = Ok(
  [
    List(
      [
        Symbol("eq?"),
        Symbol("second"),
        List(
          [
            Symbol("first"),
            List(
              [
                Symbol("rest"),
                List(
                  [
                    Symbol("pair"),
                    List([Symbol("Quote"), Symbol("first")]),
                    List(
                      [
                        Symbol("pair"),
                        List([Symbol("Quote"), Symbol("second")]),
                        Symbol("end"),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ],
        ),
      ],
    ),
  ],
)

let expectedAssignment = Ok(
  [
    List(
      [
        Symbol("Name"),
        Symbol("data"),
        List(
          [
            Symbol("pair"),
            List([Symbol("Quote"), Symbol("one")]),
            List(
              [
                Symbol("pair"),
                List([Symbol("Quote"), Symbol("two")]),
                Symbol("end"),
              ],
            ),
          ],
        ),
      ],
    ),
    List(
      [
        Symbol("Name"),
        Symbol("expected"),
        List([Symbol("Quote"), Symbol("two")]),
      ],
    ),
    List(
      [
        Symbol("Name"),
        Symbol("actual"),
        List([Symbol("first"), List([Symbol("rest"), Symbol("data")])]),
      ],
    ),
    List([Symbol("eq?"), Symbol("expected"), Symbol("actual")]),
  ],
)

provide let testParser = () => {
  assert Ok([Symbol("foo")]) == Read.read(Examples.symbol)
  assert Ok([Symbol("foo"), Symbol("bar")]) == Read.read(Examples.twoSymbols)
  assert Ok([List([Symbol("Quote"), Symbol("foo")])]) ==
    Read.read(Examples.quote)
  assert Ok([List([Symbol("Quote"), List([Symbol("Quote"), Symbol("foo")])])]) ==
    Read.read(Examples.nestedQuote)
  assert expectedCompare == Read.read(Examples.compare)
  assert expectedAssignment == Read.read(Examples.assignment)
  true
}

provide let testTokeniser = () => {
  assert tokenise(Examples.symbol) == ["foo"]
  assert tokenise(Examples.quote) == ["(", "Quote", "foo", ")"]
  assert tokenise(Examples.nestedQuote) ==
    ["(", "Quote", "(", "Quote", "foo", ")", ")"]
  assert tokenise(Examples.compare) ==
    [
      "(",
      "eq?",
      "second",
      "(",
      "first",
      "(",
      "rest",
      "(",
      "pair",
      "(",
      "Quote",
      "first",
      ")",
      "(",
      "pair",
      "(",
      "Quote",
      "second",
      ")",
      "end",
      ")",
      ")",
      ")",
      ")",
      ")",
    ]
  assert tokenise(Examples.assignment) ==
    [
      "(",
      "Name",
      "data",
      "(",
      "pair",
      "(",
      "Quote",
      "one",
      ")",
      "(",
      "pair",
      "(",
      "Quote",
      "two",
      ")",
      "end",
      ")",
      ")",
      ")",
      "(",
      "Name",
      "expected",
      "(",
      "Quote",
      "two",
      ")",
      ")",
      "(",
      "Name",
      "actual",
      "(",
      "first",
      "(",
      "rest",
      "data",
      ")",
      ")",
      ")",
      "(",
      "eq?",
      "expected",
      "actual",
      ")",
    ]
  true
}
if (testTokeniser() && testParser())
  print("Tests passed")
else
  print("Tests failed")
