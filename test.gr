module Test

from "./examples.gr" include Examples
from "./tokenise.gr" include Tokenise
from "./parser.gr" include Parser
use Parser.{ type Data }

let tokeniseAndParse = example => Parser.parse(Tokenise.tokenise(example))

let expectedCompare = Ok(
  [
    List(
      [
        Symbol("eq?"),
        Symbol("second"),
        List(
          [
            Symbol("first"),
            List(
              [
                Symbol("rest"),
                List(
                  [
                    Symbol("pair"),
                    List([Symbol("Quote"), Symbol("first")]),
                    List(
                      [
                        Symbol("pair"),
                        List([Symbol("Quote"), Symbol("second")]),
                        Symbol("end"),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ],
        ),
      ],
    ),
  ],
)

let expectedAssignment = Ok(
  [
    List(
      [
        Symbol("Name"),
        Symbol("data"),
        List(
          [
            Symbol("pair"),
            List([Symbol("Quote"), Symbol("one")]),
            List(
              [
                Symbol("pair"),
                List([Symbol("Quote"), Symbol("two")]),
                Symbol("end"),
              ],
            ),
          ],
        ),
      ],
    ),
    List(
      [
        Symbol("Name"),
        Symbol("expected"),
        List([Symbol("Quote"), Symbol("two")]),
      ],
    ),
    List(
      [
        Symbol("Name"),
        Symbol("actual"),
        List([Symbol("first"), List([Symbol("rest"), Symbol("data")])]),
      ],
    ),
    List([Symbol("eq?"), Symbol("expected"), Symbol("actual")]),
  ],
)

provide let testParser = () =>
  Ok([Symbol("foo")]) == tokeniseAndParse(Examples.symbol) &&
    Ok([Symbol("foo"), Symbol("bar")]) == tokeniseAndParse(Examples.twoSymbols) &&
    Ok([List([Symbol("Quote"), Symbol("foo")])]) ==
      tokeniseAndParse(Examples.quote) &&
    Ok([List([Symbol("Quote"), List([Symbol("Quote"), Symbol("foo")])])]) ==
      tokeniseAndParse(Examples.nestedQuote) &&
    expectedCompare == tokeniseAndParse(Examples.compare) &&
    expectedAssignment == tokeniseAndParse(Examples.assignment)

provide let testTokeniser = () =>
  Tokenise.tokenise(Examples.symbol) == ["foo"] &&
    Tokenise.tokenise(Examples.quote) == ["(", "Quote", "foo", ")"] &&
    Tokenise.tokenise(Examples.nestedQuote) ==
      ["(", "Quote", "(", "Quote", "foo", ")", ")"] &&
    Tokenise.tokenise(Examples.compare) ==
      [
        "(",
        "eq?",
        "second",
        "(",
        "first",
        "(",
        "rest",
        "(",
        "pair",
        "(",
        "Quote",
        "first",
        ")",
        "(",
        "pair",
        "(",
        "Quote",
        "second",
        ")",
        "end",
        ")",
        ")",
        ")",
        ")",
        ")",
      ] &&
    Tokenise.tokenise(Examples.assignment) ==
      [
        "(",
        "Name",
        "data",
        "(",
        "pair",
        "(",
        "Quote",
        "one",
        ")",
        "(",
        "pair",
        "(",
        "Quote",
        "two",
        ")",
        "end",
        ")",
        ")",
        ")",
        "(",
        "Name",
        "expected",
        "(",
        "Quote",
        "two",
        ")",
        ")",
        "(",
        "Name",
        "actual",
        "(",
        "first",
        "(",
        "rest",
        "data",
        ")",
        ")",
        ")",
        "(",
        "eq?",
        "expected",
        "actual",
        ")",
      ]

if (testTokeniser() && testParser())
  print("Tests passed")
else
  print("Tests failed")
