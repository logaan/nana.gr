module Read

from "regex" include Regex
from "result" include Result
from "list" include List
from "./data.gr" include Data

let re = pattern => {
  Result.unwrap(Regex.make(pattern))
}

provide let tokenise = (input: String) => {
  let opening_puffed = Regex.replaceAll(re("\("), input, " ( ")
  let closing_puffed = Regex.replaceAll(re("\)"), opening_puffed, " ) ")
  let split_with_empties = Regex.splitAll(re("[ \n\t]"), closing_puffed)
  let empties_dropped = List.filter(s => s != "", split_with_empties)

  empties_dropped
}

let rec parsePart = (in: List<String>, out: List<Data.Data>) =>
  match ((in, out)) {
    (["(", ...restIn], out) => {
      let (unparsed, parsed) = parsePart(restIn, [])
      parsePart(unparsed, List.append(out, [Data.List(parsed)]))
    },
    ([")", ...restIn], out) => (restIn, out),
    ([nextIn, ...restIn], out) =>
      parsePart(restIn, List.append(out, [Symbol(nextIn)])),
    ([], out) => ([], out),
  }: (List<String>, List<Data.Data>)

provide let parse = tokens => match (parsePart(tokens, [])) {
  ([], data) => Ok(data),
  ([_, ..._], _) => Err("Didn't consume all input tokens"),
  _ => Err("Unexpected error"),
}

provide let read = (input: String) => parse(tokenise(input))
