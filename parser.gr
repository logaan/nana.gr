module Parser

from "result" include Result
from "list" include List as Stdlist

provide enum rec Data {
  Symbol(String),
  List(List<Data>),
}

let rec parsePart = (in: List<String>, out: List<Data>) =>
  match ((in, out)) {
    (["(", ...restIn], out) => {
      match (parsePart(restIn, [])) {
        Ok((unparsed, parsed)) =>
          parsePart(unparsed, Stdlist.append(out, [List(parsed)])),
        Err(reason) => Err(reason),
      }
    },
    ([")", ...restIn], out) => Ok((restIn, out)),
    ([nextIn, ...restIn], out) =>
      parsePart(restIn, Stdlist.append(out, [Symbol(nextIn)])),
    ([], out) => Ok(([], out)),
  }: Result<(List<String>, List<Data>), String>

provide let parse = tokens => match (parsePart(tokens, [])) {
  Ok(([], data)) => Ok(data),
  Ok(([_, ..._], _)) => Err("Didn't consume all input tokens"),
  Ok(_) => Err("Unexpected error"),
  Err(reason) => Err(reason),
}
